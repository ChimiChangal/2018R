colnames(advice_data_frame) <- c('ego', 'alter', 'advice_tie')
head(advice_data_frame)
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
head(friendship_data_frame)
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
head(reports_to_data_frame)
advice_data_frame$ego == friendship_data_frame$ego
# T
which(advice_data_frame$ego != friendship_data_frame$ego)
which(advice_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
krack_full_data_frame <- cbind(advice_data_frame,
friendship_data_frame$friendship_tie,
reports_to_data_frame$reports_to_tie)
head(krack_full_data_frame)
names(krack_full_data_frame)[4:5] <- c("friendship_tie",
"reports_to_tie")
head(krack_full_data_frame)
krack_full_data_frame <- data.frame(ego = advice_data_frame[,1],
alter = advice_data_frame[,2],
advice_tie = advice_data_frame[,3],
friendship_tie = friendship_data_frame[,3],
reports_to_tie = reports_to_data_frame[,3])
head(krack_full_data_frame)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
summary(krack_full)
igraph::get.edge.attribute(krack_full, 'advice_tie')
igraph::get.edge.attribute(krack_full, 'friendship_tie'
)
krack_full_symmetrized <- as.undirected(krack_full, mode='collapse')
summary(krack_full_symmetrized)
V(krack_full)
names(attributes)
for (i in V(krack_full)) {
for (j in names(attributes)) {
krack_full <- igraph::set.vertex.attribute(krack_full,
j,
index = i,
attributes[i + 1, j])
}
}
krack_full
attributes[1 + 1, 1]
attributes[1 + 1, 2]
attributes[1 + 2, 2]
plot(krack_full)
krack_advice_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "advice_tie") == 0])
summary(krack_advice_only)
plot(krack_advice_only)
krack_friendship_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "friendship_tie") == 0])
summary(krack_friendship_only)
plot(krack_friendship_only)
krack_reports_to_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "reports_to_tie") == 0])
summary(krack_reports_to_only)
plot(krack_reports_to_only)
reports_to_layout <- layout.fruchterman.reingold(krack_reports_to_only)
plot(krack_reports_to_only,
layout=reports_to_layout)
dept_vertex_colors = igraph::get.vertex.attribute(krack_full,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5)
tenure_vertex_sizes = igraph::get.vertex.attribute(krack_full,"TENURE")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
pdf("1.7_Krackhardt_Reports_Vertex_Size.pdf")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
dev.off()
tenure_vertex_sizes = igraph::get.vertex.attribute(krack_full,"TENURE")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5)
tenure_vertex_sizes
data(kracknets, package = "NetData")
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
summary(krack_full)
krack_full_symmetrized <- as.undirected(krack_full, mode='collapse')
summary(krack_full_symmetrized)
attributes = cbind(1:length(attributes[,1]), attributes)
krack_full <- graph.data.frame(d = krack_full_nonzero_edges,
vertices = attributes)
summary(krack_full)
plot(krack_full)
# 注意游标0开始
dept_vertex_colors = igraph::get.vertex.attribute(krack_full,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
tenure_vertex_sizes = igraph::get.vertex.attribute(krack_full,"TENURE")
tenure_vertex_sizes
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(krack_full)$color[ E(krack_full)$advice_tie==1 ] = tie_type_colors[1]
E(krack_full)$color[ E(krack_full)$friendship_tie==1 ] = tie_type_colors[2]
E(krack_full)$color[ E(krack_full)$reports_to_tie==1 ] = tie_type_colors[3]
E(krack_full)$arrow.size=.5
V(krack_full)$color = dept_vertex_colors
V(krack_full)$frame = dept_vertex_colors
plot(krack_full,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
legend(1,
1.25,
legend = c('Advice',
'Friendship',
'Reports To'),
col = tie_type_colors,
lty=1,
cex = .7)
plot(krack_friendship_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes,
main='Krackhardt High-Tech Managers')
is.simple(krack_friendship_only)
is.simple(krack_full)
dg <- degree(krack_friendship_only)
dg
gg <- subgraph(gg, which(dg > 0) - 1)
gg <- subgraph(krack_friendship_only, which(dg > 0) - 1)
gg <- igraph_induced_subgraph(krack_friendship_only, which(dg > 0) - 1)
gg <- subgraph(krack_friendship_only, which(dg > 0) - 1)
com <- walktrap.community(krack_friendship_only, steps=5)
subgroup <- split(com$labels, com$membership)
com
com <- walktrap.community(krack_friendship_only, steps=3)
data(karate)
plot(karate)
install.packages("igraphdata")
data(karate)
plot(karate)
data(package="igraphdata")
library("igraphdata")
data(karate)
plot(karate)
rm(list=ls())# clear memory
library(igraph)# load package igraph
g_el2 <- graph( c(1,2, 1,3, 2,3, 3,4 ))
summary(g1)
plot(g_el1)
g_el1 <- graph( c(1,2, 1,3, 2,3, 3,4 ))
summary(ge11)
plot(g_el1)
g_el2 <- graph( c(1,2, 1,3, 2,3, 3,4 ), directed=FALSE)
summary(g_el2)
plot(g_el2)
edgelist<-get.edgelist(g_el1) # get the deglist
g_el3<-graph( t(edgelist))
plot(g_el3)
library(igraph)
#Generate graph object from adjacency matrix
adjm_u<-matrix(
c(0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 1, 0,
0, 1, 0, 1, 0, 0,
0, 0, 1, 0, 1, 1,
1, 1, 0, 1, 0, 0,
0, 0, 0, 1, 0, 0), # the data elements
nrow=6,
ncol=6,
byrow = TRUE)
# number of rows
# number of columns
# fill matrix by rows
g_adj_u <- graph.adjacency(adjm_u, mode="undirected")
plot(g_adj_u)
tkplot(g_adj_u)
get.adjacency(g_adj_u)
node1 = c("Her", "You", "Him")
node2 = c("Him", "Her", "You")
weight = c(10, -2, 3)
df = data.frame(node1, node2, weight)
g <- graph.data.frame(df, directed=FALSE)
V(g)$name # node names
E(g)$weight # edge weights
plot(g)
adjm_u<-matrix(
c(0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 1, 0,
0, 1, 0, 1, 0, 0,
0, 0, 1, 0, 1, 1,
1, 1, 0, 1, 0, 0,
0, 0, 0, 1, 0, 0), # the data elements
nrow=6,
ncol=6,
byrow = TRUE)
# number of rows
# number of columns
# fill matrix by rows
g_adj_u <- graph.adjacency(adjm_u, mode="undirected")
# calculate the degree and degree distribution
degree(g_adj_u)
degree.distribution(g_adj_u)
degree(g_adj_u,loops = FALSE)
shortest.paths(g_adj_u)
average.path.length(g_adj_u)
path.length.hist(g_adj_u)
transitivity(g_adj_u, type="local")#
transitivity(g_adj_u, type="average")
transitivity(g_adj_u)
rm(list=ls())# clear memory
library(igraph)# load package igraph
##############
#Generate directed graph object from adjacency matrix
##############
adjm_d<-matrix(
c(0, 1, 0, 0, 0,
0, 0, 1, 1, 1,
0, 0, 0, 0, 0,
0, 1, 1, 0, 0,
0, 0, 0, 1, 0), # the data elements
nrow=5,
ncol=5,
byrow = TRUE)
# number of rows
# number of columns
# fill matrix by rows
g_adj_d <- graph.adjacency(adjm_d, mode="directed")
degree(g_adj_d, mode="in")
degree(g_adj_d, mode="out")
degree.distribution(g_adj_d, mode="in")
degree.distribution(g_adj_d, mode="out")
degree(g_adj_d,mode="in",loops = FALSE)
degree(g_adj_d,mode="out",loops = FALSE)
shortest.paths(g_adj_d, mode="out")
shortest.paths(g_adj_d, mode="in")
average.path.length(g_adj_d)
path.length.hist (g_adj_d)
library(igraph)
g <- erdos.renyi.game(100, 1/100)
tkplot(g) #
library(network)
install.packages("network")
library(network)
data(flo)
nflo<-network(flo,directed=FALSE)    #Convert to network object form
all(nflo[,]==flo)                    #Trust, but verify
#A fancy display:
plot(nflo,displaylabels=TRUE,boxed.labels=FALSE,label.cex=0.75)
degree.distribution(nflo)
setwd("/Users/liding/E/Bdata/liding17/2018R/l13sna/")
nodes <- read.csv("./Data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("./Data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
# Examine the data:
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links);
nrow(unique(links[,c("from", "to")]))
nrow(unique(links[,c("from", "to", "type")]))
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
nrow(links); nrow(unique(links[,c("from", "to")]))
nodes2 <- read.csv("./Data/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("./Data/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
head(nodes2)
head(links2)
# links2 is a matrix for a two-mode network:
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net)
net
# We can access the nodes, edges, and their attributes:
E(net)
V(net)
E(net)$type
V(net)$media
g_el1 <- graph( c(1,2, 1,3, 2,3, 3,4 ))
summary(ge11)
summary(g_e11)
g_el1 <- graph( c(1,2, 1,3, 2,3, 3,4 ))
summary(g_el1)
plot(g_el1)
g_el2 <- graph( c(1,2, 1,3, 2,3, 3,4 ), directed=FALSE)
summary(g_el2)
plot(g_el2)
edgelist<-get.edgelist(g_el1)
edgelist
g_el3<-graph(t(edgelist))
plot(g_el3)
plot(g_el1)
plot(g_el3)
adjm_u<-matrix(
c(0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 1, 0,
0, 1, 0, 1, 0, 0,
0, 0, 1, 0, 1, 1,
1, 1, 0, 1, 0, 0,
0, 0, 0, 1, 0, 0), # the data elements
nrow=6,
ncol=6,
byrow = TRUE)
g_adj_u <- graph.adjacency(adjm_u, mode="undirected")
plot(g_adj_u)
tkplot(g_adj_u)
get.adjacency(g_adj_u)
node1 = c("Her", "You", "Him")
node2 = c("Him", "Her", "You")
weight = c(10, -2, 3)
df = data.frame(node1, node2, weight)
d
df
g <- graph.data.frame(df, directed=FALSE)
g
V(g)$name
E(g)$weigh
g <- graph.data.frame(df, directed=FALSE,weight=weight)
data(kracknets, package = "NetData")
data(kracknets, package = "NetData")
View(advice_data_frame)
head(krack_full_data_frame)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
summary(krack_full)
View(krack_full_data_frame)
krack_full$`1`
krack_full[[1]]
V(krack_full)
names(attributes)
attributes[1+ 1, 2]
head(attributes)
1:length(attributes[,1])
attributes = cbind(1:length(attributes[,1]), attributes)
head(attributes)
head(attributes)
krack_full <- graph.data.frame(d = krack_full_nonzero_edges,
vertices = attributes)
plot(krack_full)
plot(krack_full)
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "advice_tie") == 0]
E(krack_full)
igraph::get.edge.attribute(krack_full,
name = "advice_tie") == 0
krack_advice_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "advice_tie") == 0])
summary(krack_advice_only)
plot(krack_advice_only)
krack_friendship_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "friendship_tie") == 0])
summary(krack_friendship_only)
plot(krack_friendship_only)
krack_reports_to_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "reports_to_tie") == 0])
summary(krack_reports_to_only)
plot(krack_reports_to_only)
krack_reports_to_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "reports_to_tie") == 1])
plot(krack_reports_to_only)
krack_reports_to_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "reports_to_tie") == 0])
plot(krack_reports_to_only)
reports_to_layout <- layout.fruchterman.reingold(krack_reports_to_only)
plot(krack_reports_to_only,
layout=reports_to_layout)
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors = igraph::get.vertex.attribute(krack_full,"DEPT")
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5)
tenure_vertex_sizes = igraph::get.vertex.attribute(krack_full,"TENURE")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(k
tie_type_colors
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
tie_type_colors
E(krack_full)$color[ E(krack_full)$advice_tie==1 ] = tie_type_colors[1]
E(krack_full)$color[ E(krack_full)$friendship_tie==1 ] = tie_type_colors[2]
E(krack_full)$color[ E(krack_full)$reports_to_tie==1 ] = tie_type_colors[3]
E(krack_full)$arrow.size=.5
V(krack_full)$color = dept_vertex_colors
V(krack_full)$frame = dept_vertex_colors
plot(krack_full,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
legend(1,
1.25,
legend = c('Advice',
'Friendship',
'Reports To'),
col = tie_type_colors,
lty=1,
cex = .7)
plot(krack_friendship_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes,
main='Krackhardt High-Tech Managers')
adjm_u<-matrix(
c(0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 1, 0,
0, 1, 0, 1, 0, 0,
0, 0, 1, 0, 1, 1,
1, 1, 0, 1, 0, 0,
0, 0, 0, 1, 0, 0), # the data elements
nrow=6,
ncol=6,
byrow = TRUE)
g_adj_u <- graph.adjacency(adjm_u, mode="undirected")
degree(g_adj_u)
degree(g_adj_u)
degree.distribution(g_adj_u)
degree(g_adj_u,loops = FALSE)
shortest.paths(g_adj_u)
average.path.length(g_adj_u)
path.length.hist(g_adj_u)
transitivity(g_adj_u, type="local")
library(igraph)
g <- erdos.renyi.game(100, 1/100)
tkplot(g)
40824/17841
40824/17841
12690/279
2.288^1/8
1.286^8
1.15^8
1.10^8
1.12^8
1.11^8
1.109^8
